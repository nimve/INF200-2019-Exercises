# -*- coding: utf-8 -*-

__author__ = 'Nina Mariann Vesseltun'
__email__ = 'nive@nmbu.no'

from random import randint
import pytest


class ListRand:
    def __init__(self, liste):
        self.liste = liste
        self.current_idx = 0

    def rand(self):
        for i in self.liste:
                self.current_idx += 1
                yield i
                if self.current_idx == len(self.liste):
                    raise RuntimeError


class LCGRand:
    def __init__(self, seed):
        self.seed = seed

    def rand(self):
        a = 16807
        m = 2 ** 31 - 1
        while True:
            self.seed = a * self.seed % m
            yield self.seed

def check(liste):
    klasse = ListRand(liste)
    generator = klasse.rand()
    for i in range(len(liste)):
        x = next(generator)
    with pytest
    assert next(generator)

def test(liste):


if __name__ == "__main__":
    LCGklasse = LCGRand(3)
    LCGgenob = LCGklasse.rand()
    for i in range(5):
        print('Generated by LCGRand: ', next(LCGgenob))

    numbers = [randint(0, 100) for i in range(3)]
    print(numbers)
    print('Length: ', len(numbers))
    ListRand_classobject = ListRand(numbers)
    ListRand_generatorobject = ListRand_classobject.rand()
    for i in range(len(numbers)):
        print('Generated by ListRand: ', next(ListRand_generatorobject))

    print('Generated by ListRand: ', next(ListRand_generatorobject))


